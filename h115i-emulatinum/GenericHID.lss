
GenericHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001054  000010e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  00800110  00800110  000010f8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000066c3  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d17  00000000  00000000  00007a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000075fc  00000000  00000000  000097b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a4  00000000  00000000  00010db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021a9  00000000  00000000  00011558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000402e  00000000  00000000  00013701  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  0001772f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
       2:	00 00       	nop
       4:	9f c0       	rjmp	.+318    	; 0x144 <__bad_interrupt>
       6:	00 00       	nop
       8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
       a:	00 00       	nop
       c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
       e:	00 00       	nop
      10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
      12:	00 00       	nop
      14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
      16:	00 00       	nop
      18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
      1e:	00 00       	nop
      20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
      22:	00 00       	nop
      24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
      26:	00 00       	nop
      28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d1 c3       	rjmp	.+1954   	; 0x7d0 <__vector_11>
      2e:	00 00       	nop
      30:	89 c0       	rjmp	.+274    	; 0x144 <__bad_interrupt>
      32:	00 00       	nop
      34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
      36:	00 00       	nop
      38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	83 c0       	rjmp	.+262    	; 0x144 <__bad_interrupt>
      3e:	00 00       	nop
      40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
      42:	00 00       	nop
      44:	7f c0       	rjmp	.+254    	; 0x144 <__bad_interrupt>
      46:	00 00       	nop
      48:	7d c0       	rjmp	.+250    	; 0x144 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
      4e:	00 00       	nop
      50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
      52:	00 00       	nop
      54:	77 c0       	rjmp	.+238    	; 0x144 <__bad_interrupt>
      56:	00 00       	nop
      58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	73 c0       	rjmp	.+230    	; 0x144 <__bad_interrupt>
      5e:	00 00       	nop
      60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
      62:	00 00       	nop
      64:	6f c0       	rjmp	.+222    	; 0x144 <__bad_interrupt>
      66:	00 00       	nop
      68:	6d c0       	rjmp	.+218    	; 0x144 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
      6e:	00 00       	nop
      70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:
      74:	22 03 48 00 31 00 31 00 35 00 69 00 20 00 45 00     ".H.1.1.5.i. .E.
      84:	6d 00 75 00 6c 00 61 00 74 00 69 00 6e 00 75 00     m.u.l.a.t.i.n.u.
      94:	6d 00 00 00                                         m...

00000098 <ManufacturerString>:
      98:	1c 03 45 00 6d 00 75 00 6c 00 61 00 74 00 65 00     ..E.m.u.l.a.t.e.
      a8:	64 00 20 00 49 00 6e 00 63 00 2e 00 00 00           d. .I.n.c.....

000000b6 <LanguageString>:
      b6:	04 03 09 04                                         ....

000000ba <ConfigurationDescriptor>:
      ba:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      ca:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 40     ...!...." .....@
      da:	00 e8                                               ..

000000dc <DeviceDescriptor>:
      dc:	12 01 10 01 00 00 00 08 1c 1b 17 0c 00 01 01 02     ................
      ec:	00 01                                               ..

000000ee <GenericReport>:
      ee:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
      fe:	40 81 02 09 03 15 00 25 ff 75 08 95 40 91 02 c0     @......%.u..@...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d2 e0       	ldi	r29, 0x02	; 2
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e4 e5       	ldi	r30, 0x54	; 84
     122:	f0 e1       	ldi	r31, 0x10	; 16
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a0 31       	cpi	r26, 0x10	; 16
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	21 e0       	ldi	r18, 0x01	; 1
     132:	a0 e1       	ldi	r26, 0x10	; 16
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	af 35       	cpi	r26, 0x5F	; 95
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	26 d0       	rcall	.+76     	; 0x18e <main>
     142:	86 c7       	rjmp	.+3852   	; 0x1050 <_exit>

00000144 <__bad_interrupt>:
     144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <LEDs_SetAllLEDs>:
				PORTD |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
     146:	9b b1       	in	r25, 0x0b	; 11
     148:	90 63       	ori	r25, 0x30	; 48
     14a:	80 95       	com	r24
     14c:	98 23       	and	r25, r24
     14e:	9b b9       	out	0x0b, r25	; 11
			}
     150:	08 95       	ret

00000152 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     152:	84 b7       	in	r24, 0x34	; 52
     154:	87 7f       	andi	r24, 0xF7	; 247
     156:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	f8 94       	cli
     15c:	a8 95       	wdr
     15e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     162:	88 61       	ori	r24, 0x18	; 24
     164:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     168:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     16c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     16e:	80 e8       	ldi	r24, 0x80	; 128
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	f8 94       	cli
     176:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     17a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     17e:	0f be       	out	0x3f, r0	; 63
				DDRD  |= LEDS_ALL_LEDS;
     180:	8a b1       	in	r24, 0x0a	; 10
     182:	80 63       	ori	r24, 0x30	; 48
     184:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
     186:	8b b1       	in	r24, 0x0b	; 11
     188:	80 63       	ori	r24, 0x30	; 48
     18a:	8b b9       	out	0x0b, r24	; 11
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     18c:	12 c3       	rjmp	.+1572   	; 0x7b2 <USB_Init>

0000018e <main>:
	SetupHardware();
     18e:	e1 df       	rcall	.-62     	; 0x152 <SetupHardware>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     190:	80 e2       	ldi	r24, 0x20	; 32
     192:	d9 df       	rcall	.-78     	; 0x146 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     194:	78 94       	sei
		HID_Device_USBTask(&Generic_HID_Interface);
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
     19a:	81 d6       	rcall	.+3330   	; 0xe9e <HID_Device_USBTask>
     19c:	18 d5       	rcall	.+2608   	; 0xbce <USB_USBTask>
	for (;;)
     19e:	fb cf       	rjmp	.-10     	; 0x196 <main+0x8>

000001a0 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1a0:	80 e1       	ldi	r24, 0x10	; 16
     1a2:	d1 cf       	rjmp	.-94     	; 0x146 <LEDs_SetAllLEDs>

000001a4 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1a4:	80 e2       	ldi	r24, 0x20	; 32
     1a6:	cf cf       	rjmp	.-98     	; 0x146 <LEDs_SetAllLEDs>

000001a8 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	60 d6       	rcall	.+3264   	; 0xe6e <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     1ae:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     1b2:	94 60       	ori	r25, 0x04	; 4
     1b4:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1b8:	81 11       	cpse	r24, r1
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <EVENT_USB_Device_ConfigurationChanged+0x18>
     1bc:	80 e2       	ldi	r24, 0x20	; 32
     1be:	c3 cf       	rjmp	.-122    	; 0x146 <LEDs_SetAllLEDs>
     1c0:	80 e1       	ldi	r24, 0x10	; 16
     1c2:	fd cf       	rjmp	.-6      	; 0x1be <EVENT_USB_Device_ConfigurationChanged+0x16>

000001c4 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	1c c5       	rjmp	.+2616   	; 0xc02 <HID_Device_ProcessControlRequest>

000001ca <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     1ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Generic_HID_Interface+0xe>
     1ce:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Generic_HID_Interface+0xf>
     1d2:	00 97       	sbiw	r24, 0x00	; 0
     1d4:	29 f0       	breq	.+10     	; 0x1e0 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Generic_HID_Interface+0xf>
     1dc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Generic_HID_Interface+0xe>

/** Event handler for the USB device Start Of Frame event. */
void EVENT_USB_Device_StartOfFrame(void)
{
	HID_Device_MillisecondElapsed(&Generic_HID_Interface);
}
     1e0:	08 95       	ret

000001e2 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	f9 01       	movw	r30, r18
     1e8:	d8 01       	movw	r26, r16
	uint8_t* Data        = (uint8_t*)ReportData;
	int i = 0;

	Data[i++] = 0xff;
     1ea:	9f ef       	ldi	r25, 0xFF	; 255
     1ec:	90 83       	st	Z, r25
	Data[i++] = 0x78;
     1ee:	88 e7       	ldi	r24, 0x78	; 120
     1f0:	81 83       	std	Z+1, r24	; 0x01
	Data[i++] = 0x11;
     1f2:	81 e1       	ldi	r24, 0x11	; 17
     1f4:	82 83       	std	Z+2, r24	; 0x02
	Data[i++] = 0x0f;
     1f6:	8f e0       	ldi	r24, 0x0F	; 15
     1f8:	83 83       	std	Z+3, r24	; 0x03
	Data[i++] = 0x00;
     1fa:	14 82       	std	Z+4, r1	; 0x04
	Data[i++] = 0x2e;
     1fc:	8e e2       	ldi	r24, 0x2E	; 46
     1fe:	85 83       	std	Z+5, r24	; 0x05
	Data[i++] = 0x00;
     200:	16 82       	std	Z+6, r1	; 0x06
	Data[i++] = 0xbd;
     202:	8d eb       	ldi	r24, 0xBD	; 189
     204:	87 83       	std	Z+7, r24	; 0x07
	Data[i++] = 0x1b;
     206:	8b e1       	ldi	r24, 0x1B	; 27
     208:	80 87       	std	Z+8, r24	; 0x08
	Data[i++] = 0x00;
     20a:	11 86       	std	Z+9, r1	; 0x09
	Data[i++] = 0x00;
     20c:	12 86       	std	Z+10, r1	; 0x0a
	Data[i++] = 0xd9;
     20e:	89 ed       	ldi	r24, 0xD9	; 217
     210:	83 87       	std	Z+11, r24	; 0x0b
	Data[i++] = 0xe8;
     212:	48 ee       	ldi	r20, 0xE8	; 232
     214:	44 87       	std	Z+12, r20	; 0x0c
	Data[i++] = 0x03;
     216:	33 e0       	ldi	r19, 0x03	; 3
     218:	35 87       	std	Z+13, r19	; 0x0d
	Data[i++] = 0xd9;
     21a:	86 87       	std	Z+14, r24	; 0x0e
	Data[i++] = 0x32;
     21c:	22 e3       	ldi	r18, 0x32	; 50
     21e:	27 87       	std	Z+15, r18	; 0x0f
	Data[i++] = 0x06;
     220:	26 e0       	ldi	r18, 0x06	; 6
     222:	20 8b       	std	Z+16, r18	; 0x10
	Data[i++] = 0x00;
     224:	11 8a       	std	Z+17, r1	; 0x11
	Data[i++] = 0xd9;
     226:	82 8b       	std	Z+18, r24	; 0x12
	Data[i++] = 0xe8;
     228:	43 8b       	std	Z+19, r20	; 0x13
	Data[i++] = 0x03;
     22a:	34 8b       	std	Z+20, r19	; 0x14
	Data[i++] = 0xd9;
     22c:	85 8b       	std	Z+21, r24	; 0x15
	Data[i++] = 0x92;
     22e:	82 e9       	ldi	r24, 0x92	; 146
     230:	86 8b       	std	Z+22, r24	; 0x16
	Data[i++] = 0x06;
     232:	27 8b       	std	Z+23, r18	; 0x17
	Data[i++] = 0x02;
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	80 8f       	std	Z+24, r24	; 0x18
	Data[i++] = 0xff;
     238:	91 8f       	std	Z+25, r25	; 0x19
	Data[i++] = 0x00;
     23a:	12 8e       	std	Z+26, r1	; 0x1a
	Data[i++] = 0x00;
     23c:	13 8e       	std	Z+27, r1	; 0x1b
	Data[i++] = 0xff;
     23e:	94 8f       	std	Z+28, r25	; 0x1c
	Data[i++] = 0xe9;
     240:	89 ee       	ldi	r24, 0xE9	; 233
     242:	85 8f       	std	Z+29, r24	; 0x1d
	Data[i++] = 0x0a;
     244:	8a e0       	ldi	r24, 0x0A	; 10
     246:	86 8f       	std	Z+30, r24	; 0x1e
	Data[i++] = 0x00;
     248:	17 8e       	std	Z+31, r1	; 0x1f
	Data[i++] = 0x00;
     24a:	10 a2       	std	Z+32, r1	; 0x20
	Data[i++] = 0x00;
     24c:	11 a2       	std	Z+33, r1	; 0x21
	Data[i++] = 0x00;
     24e:	12 a2       	std	Z+34, r1	; 0x22
	Data[i++] = 0x00;
     250:	13 a2       	std	Z+35, r1	; 0x23
	Data[i++] = 0x00;
     252:	14 a2       	std	Z+36, r1	; 0x24
	Data[i++] = 0x00;
     254:	15 a2       	std	Z+37, r1	; 0x25
	Data[i++] = 0x00;
     256:	16 a2       	std	Z+38, r1	; 0x26
	Data[i++] = 0x00;
     258:	17 a2       	std	Z+39, r1	; 0x27
	Data[i++] = 0x00;
     25a:	10 a6       	std	Z+40, r1	; 0x28
	Data[i++] = 0x00;
     25c:	11 a6       	std	Z+41, r1	; 0x29
	Data[i++] = 0x00;
     25e:	12 a6       	std	Z+42, r1	; 0x2a
	Data[i++] = 0x00;
     260:	13 a6       	std	Z+43, r1	; 0x2b
	Data[i++] = 0x00;
     262:	14 a6       	std	Z+44, r1	; 0x2c
	Data[i++] = 0x00;
     264:	15 a6       	std	Z+45, r1	; 0x2d
	Data[i++] = 0x00;
     266:	16 a6       	std	Z+46, r1	; 0x2e
	Data[i++] = 0x00;
     268:	17 a6       	std	Z+47, r1	; 0x2f
	Data[i++] = 0x00;
     26a:	10 aa       	std	Z+48, r1	; 0x30
	Data[i++] = 0x00;
     26c:	11 aa       	std	Z+49, r1	; 0x31
	Data[i++] = 0x00;
     26e:	12 aa       	std	Z+50, r1	; 0x32
	Data[i++] = 0x00;
     270:	13 aa       	std	Z+51, r1	; 0x33
	Data[i++] = 0x00;
     272:	14 aa       	std	Z+52, r1	; 0x34
	Data[i++] = 0x00;
     274:	15 aa       	std	Z+53, r1	; 0x35
	Data[i++] = 0x00;
     276:	16 aa       	std	Z+54, r1	; 0x36
	Data[i++] = 0x00;
     278:	17 aa       	std	Z+55, r1	; 0x37
	Data[i++] = 0x00;
     27a:	10 ae       	std	Z+56, r1	; 0x38
	Data[i++] = 0x00;
     27c:	11 ae       	std	Z+57, r1	; 0x39
	Data[i++] = 0x00;
     27e:	12 ae       	std	Z+58, r1	; 0x3a
	Data[i++] = 0x00;
     280:	13 ae       	std	Z+59, r1	; 0x3b
	Data[i++] = 0x00;
     282:	14 ae       	std	Z+60, r1	; 0x3c
	Data[i++] = 0x00;
     284:	15 ae       	std	Z+61, r1	; 0x3d
	Data[i++] = 0x00;
     286:	16 ae       	std	Z+62, r1	; 0x3e
	Data[i++] = 0x21;
     288:	81 e2       	ldi	r24, 0x21	; 33
     28a:	87 af       	std	Z+63, r24	; 0x3f
	/* Data[0] = ((CurrLEDMask & LEDS_LED1) ? 1 : 0); */
	/* Data[1] = ((CurrLEDMask & LEDS_LED2) ? 1 : 0); */
	/* Data[2] = ((CurrLEDMask & LEDS_LED3) ? 1 : 0); */
	/* Data[3] = ((CurrLEDMask & LEDS_LED4) ? 1 : 0); */

	*ReportSize = GENERIC_REPORT_SIZE;
     28c:	80 e4       	ldi	r24, 0x40	; 64
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	8d 93       	st	X+, r24
     292:	9c 93       	st	X, r25
	if (hack_send) {
     294:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     298:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
     29c:	89 2b       	or	r24, r25
     29e:	41 f0       	breq	.+16     	; 0x2b0 <CALLBACK_HID_Device_CreateHIDReport+0xce>
		hack_send = 0;
     2a0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
     2a4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		return true;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
}
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret
	return false;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	fb cf       	rjmp	.-10     	; 0x2aa <CALLBACK_HID_Device_CreateHIDReport+0xc8>

000002b4 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     2b4:	f9 01       	movw	r30, r18
	uint8_t* Data       = (uint8_t*)ReportData;
	uint8_t  NewLEDMask = LEDS_NO_LEDS;

	if (Data[0])
     2b6:	80 81       	ld	r24, Z
     2b8:	81 11       	cpse	r24, r1
	  NewLEDMask |= LEDS_LED1;
     2ba:	80 e2       	ldi	r24, 0x20	; 32

	if (Data[1])
     2bc:	91 81       	ldd	r25, Z+1	; 0x01
     2be:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED2;
     2c0:	80 61       	ori	r24, 0x10	; 16
	  NewLEDMask |= LEDS_LED3;

	if (Data[3])
	  NewLEDMask |= LEDS_LED4;

	LEDs_SetAllLEDs(NewLEDMask);
     2c2:	41 df       	rcall	.-382    	; 0x146 <LEDs_SetAllLEDs>
	hack_send = 1;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
     2cc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
     2d0:	08 95       	ret

000002d2 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
     2d2:	9c 01       	movw	r18, r24
     2d4:	da 01       	movw	r26, r20
	const uint8_t  DescriptorType   = (wValue >> 8);
     2d6:	83 2f       	mov	r24, r19
     2d8:	99 27       	eor	r25, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	91 05       	cpc	r25, r1
     2de:	b9 f0       	breq	.+46     	; 0x30e <__stack+0xf>
     2e0:	60 f4       	brcc	.+24     	; 0x2fa <CALLBACK_USB_GetDescriptor+0x28>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	91 05       	cpc	r25, r1
     2e6:	61 f1       	breq	.+88     	; 0x340 <__stack+0x41>
     2e8:	02 97       	sbiw	r24, 0x02	; 2
     2ea:	e1 f4       	brne	.+56     	; 0x324 <__stack+0x25>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     2ec:	82 e2       	ldi	r24, 0x22	; 34
     2ee:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     2f0:	2a eb       	ldi	r18, 0xBA	; 186
     2f2:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     2f4:	2d 93       	st	X+, r18
     2f6:	3c 93       	st	X, r19
	return Size;
}
     2f8:	08 95       	ret
	switch (DescriptorType)
     2fa:	81 32       	cpi	r24, 0x21	; 33
     2fc:	91 05       	cpc	r25, r1
     2fe:	29 f1       	breq	.+74     	; 0x34a <__stack+0x4b>
     300:	82 97       	sbiw	r24, 0x22	; 34
     302:	81 f4       	brne	.+32     	; 0x324 <__stack+0x25>
			Size    = sizeof(GenericReport);
     304:	80 e2       	ldi	r24, 0x20	; 32
     306:	90 e0       	ldi	r25, 0x00	; 0
			Address = &GenericReport;
     308:	2e ee       	ldi	r18, 0xEE	; 238
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	f3 cf       	rjmp	.-26     	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x22>
			switch (DescriptorNumber)
     30e:	c9 01       	movw	r24, r18
     310:	99 27       	eor	r25, r25
     312:	21 30       	cpi	r18, 0x01	; 1
     314:	61 f0       	breq	.+24     	; 0x32e <__stack+0x2f>
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	91 05       	cpc	r25, r1
     31a:	79 f0       	breq	.+30     	; 0x33a <__stack+0x3b>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     31c:	e6 eb       	ldi	r30, 0xB6	; 182
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	89 2b       	or	r24, r25
     322:	39 f0       	breq	.+14     	; 0x332 <__stack+0x33>
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	e3 cf       	rjmp	.-58     	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x22>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     32e:	e8 e9       	ldi	r30, 0x98	; 152
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	84 91       	lpm	r24, Z
     334:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ManufacturerString;
     336:	9f 01       	movw	r18, r30
					break;
     338:	dd cf       	rjmp	.-70     	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x22>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     33a:	e4 e7       	ldi	r30, 0x74	; 116
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	f9 cf       	rjmp	.-14     	; 0x332 <__stack+0x33>
	switch (DescriptorType)
     340:	82 e1       	ldi	r24, 0x12	; 18
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	2c ed       	ldi	r18, 0xDC	; 220
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	d5 cf       	rjmp	.-86     	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x22>
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     34a:	89 e0       	ldi	r24, 0x09	; 9
     34c:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor.HID_GenericHID;
     34e:	2c ec       	ldi	r18, 0xCC	; 204
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	d0 cf       	rjmp	.-96     	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x22>

00000354 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     354:	af 92       	push	r10
     356:	bf 92       	push	r11
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	6c 01       	movw	r12, r24
     368:	eb 01       	movw	r28, r22
     36a:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     36c:	b8 d1       	rcall	.+880    	; 0x6de <Endpoint_WaitUntilReady>
     36e:	f8 2e       	mov	r15, r24
     370:	81 11       	cpse	r24, r1
     372:	24 c0       	rjmp	.+72     	; 0x3bc <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     374:	01 15       	cp	r16, r1
     376:	11 05       	cpc	r17, r1
     378:	39 f0       	breq	.+14     	; 0x388 <Endpoint_Write_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
     37a:	f8 01       	movw	r30, r16
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	c8 1b       	sub	r28, r24
     382:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     384:	c8 0e       	add	r12, r24
     386:	d9 1e       	adc	r13, r25
{
     388:	b1 2c       	mov	r11, r1
     38a:	a1 2c       	mov	r10, r1
	}

	while (Length)
     38c:	20 97       	sbiw	r28, 0x00	; 0
     38e:	b1 f0       	breq	.+44     	; 0x3bc <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     390:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     394:	85 fd       	sbrc	r24, 5
     396:	22 c0       	rjmp	.+68     	; 0x3dc <Endpoint_Write_Stream_LE+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     398:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     39c:	8e 77       	andi	r24, 0x7E	; 126
     39e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     3a2:	15 d4       	rcall	.+2090   	; 0xbce <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
     3a4:	01 15       	cp	r16, r1
     3a6:	11 05       	cpc	r17, r1
     3a8:	a1 f0       	breq	.+40     	; 0x3d2 <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
     3aa:	f8 01       	movw	r30, r16
     3ac:	80 81       	ld	r24, Z
     3ae:	91 81       	ldd	r25, Z+1	; 0x01
     3b0:	a8 0e       	add	r10, r24
     3b2:	b9 1e       	adc	r11, r25
     3b4:	b1 82       	std	Z+1, r11	; 0x01
     3b6:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     3b8:	85 e0       	ldi	r24, 0x05	; 5
     3ba:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     3bc:	8f 2d       	mov	r24, r15
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	df 90       	pop	r13
     3ca:	cf 90       	pop	r12
     3cc:	bf 90       	pop	r11
     3ce:	af 90       	pop	r10
			if ((ErrorCode = Endpoint_WaitUntilReady()))
     3d0:	08 95       	ret
     3d2:	85 d1       	rcall	.+778    	; 0x6de <Endpoint_WaitUntilReady>
     3d4:	88 23       	and	r24, r24
     3d6:	d1 f2       	breq	.-76     	; 0x38c <Endpoint_Write_Stream_LE+0x38>
     3d8:	f8 2e       	mov	r15, r24
     3da:	f0 cf       	rjmp	.-32     	; 0x3bc <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
     3dc:	f6 01       	movw	r30, r12
     3de:	81 91       	ld	r24, Z+
     3e0:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3e2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			Length--;
     3e6:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     3e8:	ff ef       	ldi	r31, 0xFF	; 255
     3ea:	af 1a       	sub	r10, r31
     3ec:	bf 0a       	sbc	r11, r31
     3ee:	ce cf       	rjmp	.-100    	; 0x38c <Endpoint_Write_Stream_LE+0x38>

000003f0 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     3f0:	fc 01       	movw	r30, r24
     3f2:	cb 01       	movw	r24, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     3f4:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <USB_ControlRequest+0x6>
     3f8:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <USB_ControlRequest+0x7>
     3fc:	26 17       	cp	r18, r22
     3fe:	37 07       	cpc	r19, r23
     400:	90 f0       	brcs	.+36     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	29 f4       	brne	.+10     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     406:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     40a:	2e 77       	andi	r18, 0x7E	; 126
     40c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     410:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     412:	00 97       	sbiw	r24, 0x00	; 0
     414:	51 f4       	brne	.+20     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     416:	41 11       	cpse	r20, r1
     418:	08 c0       	rjmp	.+16     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     41a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     41e:	82 ff       	sbrs	r24, 2
     420:	30 c0       	rjmp	.+96     	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	08 95       	ret
     426:	c9 01       	movw	r24, r18
     428:	f3 cf       	rjmp	.-26     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     42a:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     42e:	22 23       	and	r18, r18
     430:	a1 f1       	breq	.+104    	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     432:	25 30       	cpi	r18, 0x05	; 5
     434:	a1 f1       	breq	.+104    	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     436:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     43a:	23 fd       	sbrc	r18, 3
     43c:	2c c0       	rjmp	.+88     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     43e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
     442:	22 fd       	sbrc	r18, 2
     444:	ea cf       	rjmp	.-44     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     446:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
     44a:	20 ff       	sbrs	r18, 0
     44c:	e2 cf       	rjmp	.-60     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
					return UEBCLX;
     44e:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     452:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     454:	00 97       	sbiw	r24, 0x00	; 0
     456:	19 f0       	breq	.+6      	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     458:	28 30       	cpi	r18, 0x08	; 8
     45a:	31 05       	cpc	r19, r1
     45c:	58 f0       	brcs	.+22     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	28 30       	cpi	r18, 0x08	; 8
     462:	31 05       	cpc	r19, r1
     464:	09 f0       	breq	.+2      	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
     466:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     468:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     46c:	2e 77       	andi	r18, 0x7E	; 126
     46e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
     472:	cf cf       	rjmp	.-98     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     474:	41 91       	ld	r20, Z+
				UEDATX = Data;
     476:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Length--;
     47a:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
     47c:	2f 5f       	subi	r18, 0xFF	; 255
     47e:	3f 4f       	sbci	r19, 0xFF	; 255
     480:	e9 cf       	rjmp	.-46     	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     482:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     486:	88 23       	and	r24, r24
     488:	41 f0       	breq	.+16     	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     48a:	85 30       	cpi	r24, 0x05	; 5
     48c:	41 f0       	breq	.+16     	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     48e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     492:	83 ff       	sbrs	r24, 3
     494:	c2 cf       	rjmp	.-124    	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     496:	81 e0       	ldi	r24, 0x01	; 1
}
     498:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	08 95       	ret

000004a2 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     4a2:	fc 01       	movw	r30, r24
     4a4:	cb 01       	movw	r24, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	29 f4       	brne	.+10     	; 0x4b4 <Endpoint_Read_Control_Stream_LE+0x12>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4aa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     4ae:	2b 77       	andi	r18, 0x7B	; 123
     4b0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	  Endpoint_ClearOUT();

	while (Length)
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	31 f4       	brne	.+12     	; 0x4c4 <Endpoint_Read_Control_Stream_LE+0x22>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     4bc:	80 ff       	sbrs	r24, 0
     4be:	1a c0       	rjmp	.+52     	; 0x4f4 <Endpoint_Read_Control_Stream_LE+0x52>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4c4:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4c8:	22 23       	and	r18, r18
     4ca:	f1 f0       	breq	.+60     	; 0x508 <Endpoint_Read_Control_Stream_LE+0x66>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4cc:	25 30       	cpi	r18, 0x05	; 5
     4ce:	c1 f0       	breq	.+48     	; 0x500 <Endpoint_Read_Control_Stream_LE+0x5e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4d0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     4d4:	23 fd       	sbrc	r18, 3
     4d6:	16 c0       	rjmp	.+44     	; 0x504 <Endpoint_Read_Control_Stream_LE+0x62>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4d8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsOUTReceived())
     4dc:	22 ff       	sbrs	r18, 2
     4de:	ea cf       	rjmp	.-44     	; 0x4b4 <Endpoint_Read_Control_Stream_LE+0x12>
					return UEBCLX;
     4e0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
			while (Length && Endpoint_BytesInEndpoint())
     4e4:	22 23       	and	r18, r18
     4e6:	09 f3       	breq	.-62     	; 0x4aa <Endpoint_Read_Control_Stream_LE+0x8>
				return UEDATX;
     4e8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4ec:	21 93       	st	Z+, r18
				Length--;
     4ee:	01 97       	sbiw	r24, 0x01	; 1
			while (Length && Endpoint_BytesInEndpoint())
     4f0:	b9 f7       	brne	.-18     	; 0x4e0 <Endpoint_Read_Control_Stream_LE+0x3e>
     4f2:	db cf       	rjmp	.-74     	; 0x4aa <Endpoint_Read_Control_Stream_LE+0x8>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4f4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4f8:	88 23       	and	r24, r24
     4fa:	31 f0       	breq	.+12     	; 0x508 <Endpoint_Read_Control_Stream_LE+0x66>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4fc:	85 30       	cpi	r24, 0x05	; 5
     4fe:	e1 f6       	brne	.-72     	; 0x4b8 <Endpoint_Read_Control_Stream_LE+0x16>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     500:	83 e0       	ldi	r24, 0x03	; 3
}
     502:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	08 95       	ret

0000050c <Endpoint_Write_Control_PStream_LE>:
{
     50c:	fc 01       	movw	r30, r24
     50e:	cb 01       	movw	r24, r22
	if (Length > USB_ControlRequest.wLength)
     510:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <USB_ControlRequest+0x6>
     514:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <USB_ControlRequest+0x7>
     518:	26 17       	cp	r18, r22
     51a:	37 07       	cpc	r19, r23
     51c:	90 f0       	brcs	.+36     	; 0x542 <Endpoint_Write_Control_PStream_LE+0x36>
	else if (!(Length))
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	29 f4       	brne	.+10     	; 0x52c <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     522:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     526:	2e 77       	andi	r18, 0x7E	; 126
     528:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     52c:	40 e0       	ldi	r20, 0x00	; 0
	while (Length || LastPacketFull)
     52e:	00 97       	sbiw	r24, 0x00	; 0
     530:	51 f4       	brne	.+20     	; 0x546 <Endpoint_Write_Control_PStream_LE+0x3a>
     532:	41 11       	cpse	r20, r1
     534:	08 c0       	rjmp	.+16     	; 0x546 <Endpoint_Write_Control_PStream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     536:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsOUTReceived()))
     53a:	82 ff       	sbrs	r24, 2
     53c:	31 c0       	rjmp	.+98     	; 0x5a0 <Endpoint_Write_Control_PStream_LE+0x94>
	return ENDPOINT_RWCSTREAM_NoError;
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	08 95       	ret
     542:	c9 01       	movw	r24, r18
     544:	f3 cf       	rjmp	.-26     	; 0x52c <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     546:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     54a:	22 23       	and	r18, r18
     54c:	a9 f1       	breq	.+106    	; 0x5b8 <Endpoint_Write_Control_PStream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     54e:	25 30       	cpi	r18, 0x05	; 5
     550:	a9 f1       	breq	.+106    	; 0x5bc <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     552:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     556:	23 fd       	sbrc	r18, 3
     558:	2d c0       	rjmp	.+90     	; 0x5b4 <Endpoint_Write_Control_PStream_LE+0xa8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     55a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
     55e:	22 fd       	sbrc	r18, 2
     560:	ea cf       	rjmp	.-44     	; 0x536 <Endpoint_Write_Control_PStream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     562:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
     566:	20 ff       	sbrs	r18, 0
     568:	e2 cf       	rjmp	.-60     	; 0x52e <Endpoint_Write_Control_PStream_LE+0x22>
					return UEBCLX;
     56a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     56e:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	19 f0       	breq	.+6      	; 0x57a <Endpoint_Write_Control_PStream_LE+0x6e>
     574:	28 30       	cpi	r18, 0x08	; 8
     576:	31 05       	cpc	r19, r1
     578:	58 f0       	brcs	.+22     	; 0x590 <Endpoint_Write_Control_PStream_LE+0x84>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     57a:	41 e0       	ldi	r20, 0x01	; 1
     57c:	28 30       	cpi	r18, 0x08	; 8
     57e:	31 05       	cpc	r19, r1
     580:	09 f0       	breq	.+2      	; 0x584 <Endpoint_Write_Control_PStream_LE+0x78>
     582:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     584:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     588:	2e 77       	andi	r18, 0x7E	; 126
     58a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
     58e:	cf cf       	rjmp	.-98     	; 0x52e <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     590:	44 91       	lpm	r20, Z
				UEDATX = Data;
     592:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     596:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     598:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
     59a:	2f 5f       	subi	r18, 0xFF	; 255
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
     59e:	e8 cf       	rjmp	.-48     	; 0x570 <Endpoint_Write_Control_PStream_LE+0x64>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5a0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5a4:	88 23       	and	r24, r24
     5a6:	41 f0       	breq	.+16     	; 0x5b8 <Endpoint_Write_Control_PStream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5a8:	85 30       	cpi	r24, 0x05	; 5
     5aa:	41 f0       	breq	.+16     	; 0x5bc <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
     5b0:	83 ff       	sbrs	r24, 3
     5b2:	c1 cf       	rjmp	.-126    	; 0x536 <Endpoint_Write_Control_PStream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
}
     5b6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	08 95       	ret

000005c0 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5c0:	98 2f       	mov	r25, r24
     5c2:	95 30       	cpi	r25, 0x05	; 5
     5c4:	28 f0       	brcs	.+10     	; 0x5d0 <Endpoint_ConfigureEndpoint_Prv+0x10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5c6:	8f 70       	andi	r24, 0x0F	; 15
     5c8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	08 95       	ret
     5d0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			UECFG1XTemp = UECFG1XData;
     5d4:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
     5d6:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
     5d8:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
     5da:	98 17       	cp	r25, r24
     5dc:	31 f0       	breq	.+12     	; 0x5ea <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
     5de:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
			UECFG1XTemp = UECFG1X;
     5e2:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
			UEIENXTemp  = UEIENX;
     5e6:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
     5ea:	21 fd       	sbrc	r18, 1
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5ee:	9f 5f       	subi	r25, 0xFF	; 255
     5f0:	e8 cf       	rjmp	.-48     	; 0x5c2 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     5f2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     5f6:	3e 7f       	andi	r19, 0xFE	; 254
     5f8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		UECFG1X &= ~(1 << ALLOC);
     5fc:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     600:	3d 7f       	andi	r19, 0xFD	; 253
     602:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
				UECONX |= (1 << EPEN);
     606:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     60a:	31 60       	ori	r19, 0x01	; 1
     60c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		UECFG0X = UECFG0XTemp;
     610:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
		UECFG1X = UECFG1XTemp;
     614:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
		UEIENX  = UEIENXTemp;
     618:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     61c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
		if (!(Endpoint_IsConfigured()))
     620:	27 fd       	sbrc	r18, 7
     622:	e5 cf       	rjmp	.-54     	; 0x5ee <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
     624:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
     626:	08 95       	ret

00000628 <Endpoint_ConfigureEndpointTable>:
{
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	16 2f       	mov	r17, r22
	for (uint8_t i = 0; i < Entries; i++)
     632:	ec 01       	movw	r28, r24
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	01 13       	cpse	r16, r17
     638:	02 c0       	rjmp	.+4      	; 0x63e <Endpoint_ConfigureEndpointTable+0x16>
	return true;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0b c0       	rjmp	.+22     	; 0x654 <Endpoint_ConfigureEndpointTable+0x2c>
		if (!(Table[i].Address))
     63e:	28 81       	ld	r18, Y
     640:	21 11       	cpse	r18, r1
     642:	03 c0       	rjmp	.+6      	; 0x64a <Endpoint_ConfigureEndpointTable+0x22>
	for (uint8_t i = 0; i < Entries; i++)
     644:	0f 5f       	subi	r16, 0xFF	; 255
     646:	25 96       	adiw	r28, 0x05	; 5
     648:	f6 cf       	rjmp	.-20     	; 0x636 <Endpoint_ConfigureEndpointTable+0xe>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     64a:	82 2f       	mov	r24, r18
     64c:	8f 70       	andi	r24, 0x0F	; 15
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     64e:	85 30       	cpi	r24, 0x05	; 5
     650:	30 f0       	brcs	.+12     	; 0x65e <Endpoint_ConfigureEndpointTable+0x36>
		  return false;
     652:	80 e0       	ldi	r24, 0x00	; 0
}
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	08 95       	ret
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
     65e:	9c 81       	ldd	r25, Y+4	; 0x04
     660:	42 e0       	ldi	r20, 0x02	; 2
     662:	92 30       	cpi	r25, 0x02	; 2
     664:	08 f0       	brcs	.+2      	; 0x668 <Endpoint_ConfigureEndpointTable+0x40>
     666:	46 e0       	ldi	r20, 0x06	; 6
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     668:	e9 81       	ldd	r30, Y+1	; 0x01
     66a:	fa 81       	ldd	r31, Y+2	; 0x02
				uint16_t CheckBytes = 8;
     66c:	68 e0       	ldi	r22, 0x08	; 8
     66e:	70 e0       	ldi	r23, 0x00	; 0
				uint8_t  MaskVal    = 0;
     670:	90 e0       	ldi	r25, 0x00	; 0
				while (CheckBytes < Bytes)
     672:	6e 17       	cp	r22, r30
     674:	7f 07       	cpc	r23, r31
     676:	80 f0       	brcs	.+32     	; 0x698 <Endpoint_ConfigureEndpointTable+0x70>
				return (MaskVal << EPSIZE0);
     678:	92 95       	swap	r25
     67a:	90 7f       	andi	r25, 0xF0	; 240
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
     67c:	49 2b       	or	r20, r25
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     67e:	6b 81       	ldd	r22, Y+3	; 0x03
     680:	62 95       	swap	r22
     682:	66 0f       	add	r22, r22
     684:	66 0f       	add	r22, r22
     686:	60 7c       	andi	r22, 0xC0	; 192
     688:	22 1f       	adc	r18, r18
     68a:	22 27       	eor	r18, r18
     68c:	22 1f       	adc	r18, r18
     68e:	62 2b       	or	r22, r18
				return Endpoint_ConfigureEndpoint_Prv(Number,
     690:	97 df       	rcall	.-210    	; 0x5c0 <Endpoint_ConfigureEndpoint_Prv>
     692:	81 11       	cpse	r24, r1
     694:	d7 cf       	rjmp	.-82     	; 0x644 <Endpoint_ConfigureEndpointTable+0x1c>
     696:	dd cf       	rjmp	.-70     	; 0x652 <Endpoint_ConfigureEndpointTable+0x2a>
					MaskVal++;
     698:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     69a:	66 0f       	add	r22, r22
     69c:	77 1f       	adc	r23, r23
     69e:	e9 cf       	rjmp	.-46     	; 0x672 <Endpoint_ConfigureEndpointTable+0x4a>

000006a0 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6a0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <USB_ControlRequest>
     6a4:	87 ff       	sbrs	r24, 7
     6a6:	13 c0       	rjmp	.+38     	; 0x6ce <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     6ac:	82 ff       	sbrs	r24, 2
     6ae:	06 c0       	rjmp	.+12     	; 0x6bc <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6b4:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
     6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6bc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_DeviceState>
     6c0:	81 11       	cpse	r24, r1
     6c2:	f2 cf       	rjmp	.-28     	; 0x6a8 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
     6c4:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6c6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_DeviceState>
     6ca:	88 23       	and	r24, r24
     6cc:	d9 f3       	breq	.-10     	; 0x6c4 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		while (!(Endpoint_IsINReady()))
     6d2:	80 ff       	sbrs	r24, 0
     6d4:	f8 cf       	rjmp	.-16     	; 0x6c6 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     6da:	8e 77       	andi	r24, 0x7E	; 126
     6dc:	ec cf       	rjmp	.-40     	; 0x6b6 <Endpoint_ClearStatusStage+0x16>

000006de <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     6de:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     6e2:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
     6e6:	95 e6       	ldi	r25, 0x65	; 101
     6e8:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     6ea:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     6ee:	82 2f       	mov	r24, r18
     6f0:	81 70       	andi	r24, 0x01	; 1
     6f2:	20 ff       	sbrs	r18, 0
     6f4:	06 c0       	rjmp	.+12     	; 0x702 <Endpoint_WaitUntilReady+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     6fa:	80 ff       	sbrs	r24, 0
     6fc:	06 c0       	rjmp	.+12     	; 0x70a <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_NoError;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     702:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     706:	22 fd       	sbrc	r18, 2
     708:	1a c0       	rjmp	.+52     	; 0x73e <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     70a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     70e:	88 23       	and	r24, r24
     710:	89 f0       	breq	.+34     	; 0x734 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     712:	85 30       	cpi	r24, 0x05	; 5
     714:	89 f0       	breq	.+34     	; 0x738 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     716:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     71a:	85 fd       	sbrc	r24, 5
     71c:	0f c0       	rjmp	.+30     	; 0x73c <Endpoint_WaitUntilReady+0x5e>
     71e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     722:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     726:	42 17       	cp	r20, r18
     728:	53 07       	cpc	r21, r19
     72a:	f9 f2       	breq	.-66     	; 0x6ea <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     72c:	91 50       	subi	r25, 0x01	; 1
     72e:	e1 f6       	brne	.-72     	; 0x6e8 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     730:	84 e0       	ldi	r24, 0x04	; 4
     732:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
     73c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
     73e:	08 95       	ret

00000740 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     740:	41 d0       	rcall	.+130    	; 0x7c4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     742:	43 d0       	rcall	.+134    	; 0x7ca <USB_INT_ClearAllInterrupts>
     744:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     748:	8f 77       	andi	r24, 0x7F	; 127
     74a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     74e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
     752:	80 68       	ori	r24, 0x80	; 128
     754:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     758:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON &= ~(1 << FRZCLK);
     75c:	8f 7d       	andi	r24, 0xDF	; 223
     75e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     762:	84 e0       	ldi	r24, 0x04	; 4
				PLLCSR = USB_PLL_PSC;
     764:	89 bd       	out	0x29, r24	; 41
     766:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     768:	89 bd       	out	0x29, r24	; 41
     76a:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     76c:	00 fe       	sbrs	r0, 0
     76e:	fd cf       	rjmp	.-6      	; 0x76a <USB_ResetInterface+0x2a>
     770:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     774:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     778:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     77c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     780:	42 e0       	ldi	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	1c df       	rcall	.-456    	; 0x5c0 <Endpoint_ConfigureEndpoint_Prv>
     788:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     78c:	8e 7f       	andi	r24, 0xFE	; 254
     78e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     792:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
     796:	81 60       	ori	r24, 0x01	; 1
     798:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     79c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << EORSTE);
     7a0:	88 60       	ori	r24, 0x08	; 8
     7a2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7a6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
				UDCON  &= ~(1 << DETACH);
     7aa:	8e 7f       	andi	r24, 0xFE	; 254
     7ac:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     7b0:	08 95       	ret

000007b2 <USB_Init>:
}
     7b2:	e3 e6       	ldi	r30, 0x63	; 99
				REGCR  &= ~(1 << REGDIS);
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	8e 7f       	andi	r24, 0xFE	; 254
     7ba:	80 83       	st	Z, r24
	USB_IsInitialized = true;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USB_IsInitialized>
	USB_ResetInterface();
     7c2:	be cf       	rjmp	.-132    	; 0x740 <USB_ResetInterface>

000007c4 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     7c4:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	#endif
}
     7c8:	08 95       	ret

000007ca <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     7ca:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif
}
     7ce:	08 95       	ret

000007d0 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	ef 93       	push	r30
     7f0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     7f2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     7f6:	82 ff       	sbrs	r24, 2
     7f8:	0a c0       	rjmp	.+20     	; 0x80e <__vector_11+0x3e>
						return (UDIEN  & (1 << SOFE));
     7fa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7fe:	82 ff       	sbrs	r24, 2
     800:	06 c0       	rjmp	.+12     	; 0x80e <__vector_11+0x3e>
						UDINT  &= ~(1 << SOFI);
     802:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     806:	8b 7f       	andi	r24, 0xFB	; 251
     808:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     80c:	de dc       	rcall	.-1604   	; 0x1ca <EVENT_USB_Device_StartOfFrame>
						return (UDINT  & (1 << SUSPI));
     80e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     812:	80 ff       	sbrs	r24, 0
     814:	17 c0       	rjmp	.+46     	; 0x844 <__vector_11+0x74>
						return (UDIEN  & (1 << SUSPE));
     816:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     81a:	80 ff       	sbrs	r24, 0
     81c:	13 c0       	rjmp	.+38     	; 0x844 <__vector_11+0x74>
						UDIEN  &= ~(1 << SUSPE);
     81e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     822:	8e 7f       	andi	r24, 0xFE	; 254
     824:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
     828:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     82c:	80 61       	ori	r24, 0x10	; 16
     82e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     832:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     836:	80 62       	ori	r24, 0x20	; 32
     838:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				PLLCSR = 0;
     83c:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     83e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     842:	b0 dc       	rcall	.-1696   	; 0x1a4 <EVENT_USB_Device_Disconnect>
						return (UDINT  & (1 << WAKEUPI));
     844:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     848:	84 ff       	sbrs	r24, 4
     84a:	27 c0       	rjmp	.+78     	; 0x89a <__vector_11+0xca>
						return (UDIEN  & (1 << WAKEUPE));
     84c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     850:	84 ff       	sbrs	r24, 4
     852:	23 c0       	rjmp	.+70     	; 0x89a <__vector_11+0xca>
				PLLCSR = USB_PLL_PSC;
     854:	84 e0       	ldi	r24, 0x04	; 4
     856:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     858:	86 e0       	ldi	r24, 0x06	; 6
     85a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     85c:	09 b4       	in	r0, 0x29	; 41
     85e:	00 fe       	sbrs	r0, 0
     860:	fd cf       	rjmp	.-6      	; 0x85c <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     862:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     866:	8f 7d       	andi	r24, 0xDF	; 223
     868:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						UDINT  &= ~(1 << WAKEUPI);
     86c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     870:	8f 7e       	andi	r24, 0xEF	; 239
     872:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << WAKEUPE);
     876:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     87a:	8f 7e       	andi	r24, 0xEF	; 239
     87c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
     880:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     884:	81 60       	ori	r24, 0x01	; 1
     886:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     88a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USB_Device_ConfigurationNumber>
     88e:	88 23       	and	r24, r24
     890:	d9 f1       	breq	.+118    	; 0x908 <__vector_11+0x138>
		  USB_DeviceState = DEVICE_STATE_Configured;
     892:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     894:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     898:	83 dc       	rcall	.-1786   	; 0x1a0 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << EORSTI));
     89a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     89e:	83 ff       	sbrs	r24, 3
     8a0:	22 c0       	rjmp	.+68     	; 0x8e6 <__vector_11+0x116>
						return (UDIEN  & (1 << EORSTE));
     8a2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8a6:	83 ff       	sbrs	r24, 3
     8a8:	1e c0       	rjmp	.+60     	; 0x8e6 <__vector_11+0x116>
						UDINT  &= ~(1 << EORSTI);
     8aa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     8ae:	87 7f       	andi	r24, 0xF7	; 247
     8b0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     8ba:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
     8be:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     8c2:	8e 7f       	andi	r24, 0xFE	; 254
     8c4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << SUSPE);
     8c8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8cc:	8e 7f       	andi	r24, 0xFE	; 254
     8ce:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
     8d2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     8d6:	80 61       	ori	r24, 0x10	; 16
     8d8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8dc:	42 e0       	ldi	r20, 0x02	; 2
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     8e2:	6e de       	rcall	.-804    	; 0x5c0 <Endpoint_ConfigureEndpoint_Prv>
     8e4:	73 d1       	rcall	.+742    	; 0xbcc <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     908:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     90c:	87 fd       	sbrc	r24, 7
     90e:	02 c0       	rjmp	.+4      	; 0x914 <__vector_11+0x144>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	c0 cf       	rjmp	.-128    	; 0x894 <__vector_11+0xc4>
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	be cf       	rjmp	.-132    	; 0x894 <__vector_11+0xc4>

00000918 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	aa 97       	sbiw	r28, 0x2a	; 42
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     92e:	87 e5       	ldi	r24, 0x57	; 87
     930:	91 e0       	ldi	r25, 0x01	; 1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     932:	fc 01       	movw	r30, r24
     934:	01 96       	adiw	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     936:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     93a:	20 83       	st	Z, r18
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     93c:	21 e0       	ldi	r18, 0x01	; 1
     93e:	8f 35       	cpi	r24, 0x5F	; 95
     940:	92 07       	cpc	r25, r18
     942:	b9 f7       	brne	.-18     	; 0x932 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
     944:	3f dc       	rcall	.-1922   	; 0x1c4 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     946:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
     94a:	83 ff       	sbrs	r24, 3
     94c:	10 c0       	rjmp	.+32     	; 0x96e <USB_Device_ProcessControlRequest+0x56>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     94e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     952:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <USB_ControlRequest+0x1>
     956:	95 30       	cpi	r25, 0x05	; 5
     958:	09 f4       	brne	.+2      	; 0x95c <USB_Device_ProcessControlRequest+0x44>
     95a:	c2 c0       	rjmp	.+388    	; 0xae0 <USB_Device_ProcessControlRequest+0x1c8>
     95c:	00 f5       	brcc	.+64     	; 0x99e <USB_Device_ProcessControlRequest+0x86>
     95e:	29 2f       	mov	r18, r25
     960:	2d 7f       	andi	r18, 0xFD	; 253
     962:	21 30       	cpi	r18, 0x01	; 1
     964:	09 f4       	brne	.+2      	; 0x968 <USB_Device_ProcessControlRequest+0x50>
     966:	89 c0       	rjmp	.+274    	; 0xa7a <USB_Device_ProcessControlRequest+0x162>
     968:	99 23       	and	r25, r25
     96a:	09 f4       	brne	.+2      	; 0x96e <USB_Device_ProcessControlRequest+0x56>
     96c:	5e c0       	rjmp	.+188    	; 0xa2a <USB_Device_ProcessControlRequest+0x112>
     96e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     972:	83 ff       	sbrs	r24, 3
     974:	0a c0       	rjmp	.+20     	; 0x98a <USB_Device_ProcessControlRequest+0x72>
				UEINTX &= ~(1 << RXSTPI);
     976:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     97a:	87 7f       	andi	r24, 0xF7	; 247
     97c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				UECONX |= (1 << STALLRQ);
     980:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     984:	80 62       	ori	r24, 0x20	; 32
     986:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     98a:	aa 96       	adiw	r28, 0x2a	; 42
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
     99e:	98 30       	cpi	r25, 0x08	; 8
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <USB_Device_ProcessControlRequest+0x8c>
     9a2:	d5 c0       	rjmp	.+426    	; 0xb4e <USB_Device_ProcessControlRequest+0x236>
     9a4:	99 30       	cpi	r25, 0x09	; 9
     9a6:	09 f4       	brne	.+2      	; 0x9aa <USB_Device_ProcessControlRequest+0x92>
     9a8:	df c0       	rjmp	.+446    	; 0xb68 <USB_Device_ProcessControlRequest+0x250>
     9aa:	96 30       	cpi	r25, 0x06	; 6
     9ac:	01 f7       	brne	.-64     	; 0x96e <USB_Device_ProcessControlRequest+0x56>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9ae:	80 58       	subi	r24, 0x80	; 128
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	e8 f6       	brcc	.-70     	; 0x96e <USB_Device_ProcessControlRequest+0x56>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     9b4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <USB_ControlRequest+0x2>
     9b8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <USB_ControlRequest+0x3>
     9bc:	8c 3d       	cpi	r24, 0xDC	; 220
     9be:	23 e0       	ldi	r18, 0x03	; 3
     9c0:	92 07       	cpc	r25, r18
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <USB_Device_ProcessControlRequest+0xae>
     9c4:	af c0       	rjmp	.+350    	; 0xb24 <USB_Device_ProcessControlRequest+0x20c>
	SignatureDescriptor.Header.Type = DTYPE_String;
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     9ca:	8a e2       	ldi	r24, 0x2A	; 42
     9cc:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     9ce:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     9d0:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     9d2:	de 01       	movw	r26, r28
     9d4:	13 96       	adiw	r26, 0x03	; 3
     9d6:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     9d8:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     9da:	51 e2       	ldi	r21, 0x21	; 33
     9dc:	e3 2f       	mov	r30, r19
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
     9e4:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     9e6:	20 ff       	sbrs	r18, 0
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <USB_Device_ProcessControlRequest+0xd8>
					{
						SerialByte >>= 4;
     9ea:	e2 95       	swap	r30
     9ec:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     9ee:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     9f0:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     9f2:	8e 2f       	mov	r24, r30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	ea 30       	cpi	r30, 0x0A	; 10
     9f8:	08 f4       	brcc	.+2      	; 0x9fc <USB_Device_ProcessControlRequest+0xe4>
     9fa:	92 c0       	rjmp	.+292    	; 0xb20 <USB_Device_ProcessControlRequest+0x208>
     9fc:	c7 96       	adiw	r24, 0x37	; 55
     9fe:	8d 93       	st	X+, r24
     a00:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     a02:	2f 5f       	subi	r18, 0xFF	; 255
     a04:	24 31       	cpi	r18, 0x14	; 20
     a06:	51 f7       	brne	.-44     	; 0x9dc <USB_Device_ProcessControlRequest+0xc4>
				SREG = GlobalIntState;
     a08:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
     a0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a0e:	87 7f       	andi	r24, 0xF7	; 247
     a10:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     a14:	6a e2       	ldi	r22, 0x2A	; 42
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	ce 01       	movw	r24, r28
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	e9 dc       	rcall	.-1582   	; 0x3f0 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a22:	8b 77       	andi	r24, 0x7B	; 123
     a24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a28:	a2 cf       	rjmp	.-188    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a2a:	80 38       	cpi	r24, 0x80	; 128
     a2c:	99 f0       	breq	.+38     	; 0xa54 <USB_Device_ProcessControlRequest+0x13c>
     a2e:	82 38       	cpi	r24, 0x82	; 130
     a30:	09 f0       	breq	.+2      	; 0xa34 <USB_Device_ProcessControlRequest+0x11c>
     a32:	9d cf       	rjmp	.-198    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a34:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <USB_ControlRequest+0x4>
     a38:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     a3a:	85 30       	cpi	r24, 0x05	; 5
     a3c:	08 f0       	brcs	.+2      	; 0xa40 <USB_Device_ProcessControlRequest+0x128>
     a3e:	97 cf       	rjmp	.-210    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a40:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a44:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     a48:	85 fb       	bst	r24, 5
     a4a:	88 27       	eor	r24, r24
     a4c:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a4e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			}
     a52:	06 c0       	rjmp	.+12     	; 0xa60 <USB_Device_ProcessControlRequest+0x148>
	uint8_t CurrentStatus = 0;
     a54:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
     a58:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <USB_Device_RemoteWakeupEnabled>
     a5c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a5e:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
     a60:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a64:	97 7f       	andi	r25, 0xF7	; 247
     a66:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a6a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     a6e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a76:	8e 77       	andi	r24, 0x7E	; 126
     a78:	a5 c0       	rjmp	.+330    	; 0xbc4 <USB_Device_ProcessControlRequest+0x2ac>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a7a:	88 23       	and	r24, r24
     a7c:	09 f4       	brne	.+2      	; 0xa80 <USB_Device_ProcessControlRequest+0x168>
     a7e:	92 c0       	rjmp	.+292    	; 0xba4 <USB_Device_ProcessControlRequest+0x28c>
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	09 f0       	breq	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x16e>
     a84:	74 cf       	rjmp	.-280    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a86:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <USB_ControlRequest+0x2>
     a8a:	81 11       	cpse	r24, r1
     a8c:	96 c0       	rjmp	.+300    	; 0xbba <USB_Device_ProcessControlRequest+0x2a2>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a8e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <USB_ControlRequest+0x4>
     a92:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     a94:	2f ef       	ldi	r18, 0xFF	; 255
     a96:	28 0f       	add	r18, r24
     a98:	24 30       	cpi	r18, 0x04	; 4
     a9a:	08 f0       	brcs	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0x186>
     a9c:	68 cf       	rjmp	.-304    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a9e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
     aa2:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     aa6:	20 ff       	sbrs	r18, 0
     aa8:	88 c0       	rjmp	.+272    	; 0xbba <USB_Device_ProcessControlRequest+0x2a2>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     aaa:	93 30       	cpi	r25, 0x03	; 3
     aac:	31 f4       	brne	.+12     	; 0xaba <USB_Device_ProcessControlRequest+0x1a2>
				UECONX |= (1 << STALLRQ);
     aae:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     ab2:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
     ab4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			}
     ab8:	80 c0       	rjmp	.+256    	; 0xbba <USB_Device_ProcessControlRequest+0x2a2>
				UECONX |= (1 << STALLRQC);
     aba:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     abe:	90 61       	ori	r25, 0x10	; 16
     ac0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ac4:	21 e0       	ldi	r18, 0x01	; 1
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <USB_Device_ProcessControlRequest+0x1b4>
     aca:	22 0f       	add	r18, r18
     acc:	8a 95       	dec	r24
     ace:	ea f7       	brpl	.-6      	; 0xaca <USB_Device_ProcessControlRequest+0x1b2>
     ad0:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
     ad4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UECONX |= (1 << RSTDT);
     ad8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     adc:	88 60       	ori	r24, 0x08	; 8
     ade:	ea cf       	rjmp	.-44     	; 0xab4 <USB_Device_ProcessControlRequest+0x19c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ae0:	81 11       	cpse	r24, r1
     ae2:	45 cf       	rjmp	.-374    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ae4:	10 91 59 01 	lds	r17, 0x0159	; 0x800159 <USB_ControlRequest+0x2>
     ae8:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     aea:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     aee:	80 78       	andi	r24, 0x80	; 128
     af0:	81 2b       	or	r24, r17
     af2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
				UEINTX &= ~(1 << RXSTPI);
     af6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     afa:	87 7f       	andi	r24, 0xF7	; 247
     afc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
     b00:	cf dd       	rcall	.-1122   	; 0x6a0 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsINReady()));
     b06:	80 ff       	sbrs	r24, 0
     b08:	fc cf       	rjmp	.-8      	; 0xb02 <USB_Device_ProcessControlRequest+0x1ea>
				UDADDR |= (1 << ADDEN);
     b0a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     b0e:	80 68       	ori	r24, 0x80	; 128
     b10:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	11 11       	cpse	r17, r1
     b18:	83 e0       	ldi	r24, 0x03	; 3
     b1a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <USB_DeviceState>
}
     b1e:	27 cf       	rjmp	.-434    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b20:	c0 96       	adiw	r24, 0x30	; 48
     b22:	6d cf       	rjmp	.-294    	; 0x9fe <USB_Device_ProcessControlRequest+0xe6>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b24:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <USB_ControlRequest+0x4>
     b28:	70 91 5c 01 	lds	r23, 0x015C	; 0x80015c <USB_ControlRequest+0x5>
     b2c:	ae 01       	movw	r20, r28
     b2e:	4f 5f       	subi	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	cf db       	rcall	.-2146   	; 0x2d2 <CALLBACK_USB_GetDescriptor>
     b34:	bc 01       	movw	r22, r24
     b36:	89 2b       	or	r24, r25
     b38:	09 f4       	brne	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0x224>
     b3a:	19 cf       	rjmp	.-462    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
				UEINTX &= ~(1 << RXSTPI);
     b3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b40:	87 7f       	andi	r24, 0xF7	; 247
     b42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	e0 dc       	rcall	.-1600   	; 0x50c <Endpoint_Write_Control_PStream_LE>
     b4c:	68 cf       	rjmp	.-304    	; 0xa1e <USB_Device_ProcessControlRequest+0x106>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b4e:	80 38       	cpi	r24, 0x80	; 128
     b50:	09 f0       	breq	.+2      	; 0xb54 <USB_Device_ProcessControlRequest+0x23c>
     b52:	0d cf       	rjmp	.-486    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
     b54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b58:	87 7f       	andi	r24, 0xF7	; 247
     b5a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b5e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
     b62:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     b66:	85 cf       	rjmp	.-246    	; 0xa72 <USB_Device_ProcessControlRequest+0x15a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b68:	81 11       	cpse	r24, r1
     b6a:	01 cf       	rjmp	.-510    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     b6c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <USB_ControlRequest+0x2>
     b70:	92 30       	cpi	r25, 0x02	; 2
     b72:	08 f0       	brcs	.+2      	; 0xb76 <USB_Device_ProcessControlRequest+0x25e>
     b74:	fc ce       	rjmp	.-520    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
				UEINTX &= ~(1 << RXSTPI);
     b76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b7a:	87 7f       	andi	r24, 0xF7	; 247
     b7c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     b80:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
     b84:	8d dd       	rcall	.-1254   	; 0x6a0 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
     b86:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USB_Device_ConfigurationNumber>
     b8a:	88 23       	and	r24, r24
     b8c:	11 f0       	breq	.+4      	; 0xb92 <USB_Device_ProcessControlRequest+0x27a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     b8e:	84 e0       	ldi	r24, 0x04	; 4
     b90:	05 c0       	rjmp	.+10     	; 0xb9c <USB_Device_ProcessControlRequest+0x284>
				return (UDADDR & (1 << ADDEN));
     b92:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     b96:	87 fd       	sbrc	r24, 7
     b98:	fa cf       	rjmp	.-12     	; 0xb8e <USB_Device_ProcessControlRequest+0x276>
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
     ba0:	03 db       	rcall	.-2554   	; 0x1a8 <EVENT_USB_Device_ConfigurationChanged>
     ba2:	e5 ce       	rjmp	.-566    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     ba4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <USB_ControlRequest+0x2>
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	09 f0       	breq	.+2      	; 0xbae <USB_Device_ProcessControlRequest+0x296>
     bac:	e0 ce       	rjmp	.-576    	; 0x96e <USB_Device_ProcessControlRequest+0x56>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	93 30       	cpi	r25, 0x03	; 3
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <USB_Device_ProcessControlRequest+0x29e>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bba:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UEINTX &= ~(1 << RXSTPI);
     bbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bc2:	87 7f       	andi	r24, 0xF7	; 247
     bc4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bc8:	6b dd       	rcall	.-1322   	; 0x6a0 <Endpoint_ClearStatusStage>
     bca:	d1 ce       	rjmp	.-606    	; 0x96e <USB_Device_ProcessControlRequest+0x56>

00000bcc <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     bcc:	08 95       	ret

00000bce <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     bce:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     bd0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_DeviceState>
     bd4:	88 23       	and	r24, r24
     bd6:	99 f0       	breq	.+38     	; 0xbfe <USB_USBTask+0x30>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bd8:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     bdc:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bde:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     be2:	89 2f       	mov	r24, r25
     be4:	81 70       	andi	r24, 0x01	; 1
     be6:	90 fd       	sbrc	r25, 0
     be8:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bea:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bec:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bf0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     bf4:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     bf6:	90 de       	rcall	.-736    	; 0x918 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bf8:	cf 70       	andi	r28, 0x0F	; 15
     bfa:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
}
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     c02:	af 92       	push	r10
     c04:	bf 92       	push	r11
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	00 d0       	rcall	.+0      	; 0xc18 <HID_Device_ProcessControlRequest+0x16>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <HID_Device_ProcessControlRequest+0x18>
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <HID_Device_ProcessControlRequest+0x1a>
     c1c:	0f 92       	push	r0
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     c24:	8d b7       	in	r24, 0x3d	; 61
     c26:	9e b7       	in	r25, 0x3e	; 62
     c28:	9f 83       	std	Y+7, r25	; 0x07
     c2a:	8e 83       	std	Y+6, r24	; 0x06
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
     c30:	83 ff       	sbrs	r24, 3
     c32:	17 c0       	rjmp	.+46     	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     c34:	f7 01       	movw	r30, r14
     c36:	20 81       	ld	r18, Z
     c38:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <USB_ControlRequest+0x4>
     c3c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <USB_ControlRequest+0x5>
     c40:	28 17       	cp	r18, r24
     c42:	19 06       	cpc	r1, r25
     c44:	71 f4       	brne	.+28     	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
	switch (USB_ControlRequest.bRequest)
     c46:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <USB_ControlRequest+0x1>
     c4a:	89 30       	cpi	r24, 0x09	; 9
     c4c:	09 f4       	brne	.+2      	; 0xc50 <HID_Device_ProcessControlRequest+0x4e>
     c4e:	8c c0       	rjmp	.+280    	; 0xd68 <HID_Device_ProcessControlRequest+0x166>
     c50:	00 f5       	brcc	.+64     	; 0xc92 <HID_Device_ProcessControlRequest+0x90>
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	09 f4       	brne	.+2      	; 0xc58 <HID_Device_ProcessControlRequest+0x56>
     c56:	f5 c0       	rjmp	.+490    	; 0xe42 <HID_Device_ProcessControlRequest+0x240>
     c58:	83 30       	cpi	r24, 0x03	; 3
     c5a:	09 f4       	brne	.+2      	; 0xc5e <HID_Device_ProcessControlRequest+0x5c>
     c5c:	bf c0       	rjmp	.+382    	; 0xddc <HID_Device_ProcessControlRequest+0x1da>
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	81 f1       	breq	.+96     	; 0xcc2 <HID_Device_ProcessControlRequest+0xc0>
}
     c62:	8e 81       	ldd	r24, Y+6	; 0x06
     c64:	9f 81       	ldd	r25, Y+7	; 0x07
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	9e bf       	out	0x3e, r25	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	8d bf       	out	0x3d, r24	; 61
     c70:	27 96       	adiw	r28, 0x07	; 7
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	08 95       	ret
	switch (USB_ControlRequest.bRequest)
     c92:	8a 30       	cpi	r24, 0x0A	; 10
     c94:	09 f4       	brne	.+2      	; 0xc98 <HID_Device_ProcessControlRequest+0x96>
     c96:	bb c0       	rjmp	.+374    	; 0xe0e <HID_Device_ProcessControlRequest+0x20c>
     c98:	8b 30       	cpi	r24, 0x0B	; 11
     c9a:	19 f7       	brne	.-58     	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     c9c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <USB_ControlRequest>
     ca0:	81 32       	cpi	r24, 0x21	; 33
     ca2:	f9 f6       	brne	.-66     	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ca4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ca8:	87 7f       	andi	r24, 0xF7	; 247
     caa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
     cae:	f8 dc       	rcall	.-1552   	; 0x6a0 <Endpoint_ClearStatusStage>
				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     cb0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <USB_ControlRequest+0x2>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	91 11       	cpse	r25, r1
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <HID_Device_ProcessControlRequest+0xba>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	f7 01       	movw	r30, r14
     cbe:	81 87       	std	Z+9, r24	; 0x09
     cc0:	d0 cf       	rjmp	.-96     	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     cc2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <USB_ControlRequest>
     cc6:	81 3a       	cpi	r24, 0xA1	; 161
     cc8:	61 f6       	brne	.-104    	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
			{
     cca:	8d b7       	in	r24, 0x3d	; 61
     ccc:	9e b7       	in	r25, 0x3e	; 62
     cce:	9d 83       	std	Y+5, r25	; 0x05
     cd0:	8c 83       	std	Y+4, r24	; 0x04
				uint16_t ReportSize = 0;
     cd2:	1a 82       	std	Y+2, r1	; 0x02
     cd4:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     cd6:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <USB_ControlRequest+0x2>
     cda:	10 91 5a 01 	lds	r17, 0x015A	; 0x80015a <USB_ControlRequest+0x3>
     cde:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     ce0:	80 85       	ldd	r24, Z+8	; 0x08
     ce2:	48 2f       	mov	r20, r24
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	8d b7       	in	r24, 0x3d	; 61
     ce8:	9e b7       	in	r25, 0x3e	; 62
     cea:	84 1b       	sub	r24, r20
     cec:	95 0b       	sbc	r25, r21
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	9e bf       	out	0x3e, r25	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	8d bf       	out	0x3d, r24	; 61
     cf8:	ed b7       	in	r30, 0x3d	; 61
     cfa:	fe b7       	in	r31, 0x3e	; 62
     cfc:	31 96       	adiw	r30, 0x01	; 1
     cfe:	6f 01       	movw	r12, r30
				memset(ReportData, 0, sizeof(ReportData));
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	cf 01       	movw	r24, r30
     d06:	9d d1       	rcall	.+826    	; 0x1042 <memset>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     d08:	4f ef       	ldi	r20, 0xFF	; 255
     d0a:	41 0f       	add	r20, r17
				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     d0c:	8e 01       	movw	r16, r28
     d0e:	0f 5f       	subi	r16, 0xFF	; 255
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	96 01       	movw	r18, r12
     d14:	be 01       	movw	r22, r28
     d16:	6d 5f       	subi	r22, 0xFD	; 253
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	c7 01       	movw	r24, r14
     d1c:	62 da       	rcall	.-2876   	; 0x1e2 <CALLBACK_HID_Device_CreateHIDReport>
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     d1e:	f7 01       	movw	r30, r14
     d20:	86 81       	ldd	r24, Z+6	; 0x06
     d22:	97 81       	ldd	r25, Z+7	; 0x07
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	21 f0       	breq	.+8      	; 0xd30 <HID_Device_ProcessControlRequest+0x12e>
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     d28:	40 85       	ldd	r20, Z+8	; 0x08
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	b6 01       	movw	r22, r12
     d2e:	80 d1       	rcall	.+768    	; 0x1030 <memcpy>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d30:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UEINTX &= ~(1 << RXSTPI);
     d34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d38:	87 7f       	andi	r24, 0xF7	; 247
     d3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				if (ReportID)
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d42:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     d46:	69 81       	ldd	r22, Y+1	; 0x01
     d48:	7a 81       	ldd	r23, Y+2	; 0x02
     d4a:	c6 01       	movw	r24, r12
     d4c:	51 db       	rcall	.-2398   	; 0x3f0 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d52:	8b 77       	andi	r24, 0x7B	; 123
     d54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	9d 81       	ldd	r25, Y+5	; 0x05
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	9e bf       	out	0x3e, r25	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	8d bf       	out	0x3d, r24	; 61
     d66:	7d cf       	rjmp	.-262    	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d68:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <USB_ControlRequest>
     d6c:	81 32       	cpi	r24, 0x21	; 33
     d6e:	09 f0       	breq	.+2      	; 0xd72 <HID_Device_ProcessControlRequest+0x170>
     d70:	78 cf       	rjmp	.-272    	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
			{
     d72:	ed b7       	in	r30, 0x3d	; 61
     d74:	fe b7       	in	r31, 0x3e	; 62
     d76:	fd 83       	std	Y+5, r31	; 0x05
     d78:	ec 83       	std	Y+4, r30	; 0x04
				uint16_t ReportSize = USB_ControlRequest.wLength;
     d7a:	00 91 5d 01 	lds	r16, 0x015D	; 0x80015d <USB_ControlRequest+0x6>
     d7e:	10 91 5e 01 	lds	r17, 0x015E	; 0x80015e <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d82:	b0 90 59 01 	lds	r11, 0x0159	; 0x800159 <USB_ControlRequest+0x2>
     d86:	a0 90 5a 01 	lds	r10, 0x015A	; 0x80015a <USB_ControlRequest+0x3>
				uint8_t  ReportData[ReportSize];
     d8a:	8d b7       	in	r24, 0x3d	; 61
     d8c:	9e b7       	in	r25, 0x3e	; 62
     d8e:	80 1b       	sub	r24, r16
     d90:	91 0b       	sbc	r25, r17
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	9e bf       	out	0x3e, r25	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	8d bf       	out	0x3d, r24	; 61
     d9c:	ed b7       	in	r30, 0x3d	; 61
     d9e:	fe b7       	in	r31, 0x3e	; 62
     da0:	31 96       	adiw	r30, 0x01	; 1
     da2:	6f 01       	movw	r12, r30
				UEINTX &= ~(1 << RXSTPI);
     da4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     da8:	87 7f       	andi	r24, 0xF7	; 247
     daa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     dae:	b8 01       	movw	r22, r16
     db0:	cf 01       	movw	r24, r30
     db2:	77 db       	rcall	.-2322   	; 0x4a2 <Endpoint_Read_Control_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     db4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     db8:	8e 77       	andi	r24, 0x7E	; 126
     dba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     dbe:	21 e0       	ldi	r18, 0x01	; 1
     dc0:	b1 10       	cpse	r11, r1
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <HID_Device_ProcessControlRequest+0x1c4>
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     dc8:	02 1b       	sub	r16, r18
     dca:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     dcc:	2c 0d       	add	r18, r12
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     dce:	3d 1d       	adc	r19, r13
     dd0:	4f ef       	ldi	r20, 0xFF	; 255
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     dd2:	4a 0d       	add	r20, r10
     dd4:	6b 2d       	mov	r22, r11
     dd6:	c7 01       	movw	r24, r14
     dd8:	6d da       	rcall	.-2854   	; 0x2b4 <CALLBACK_HID_Device_ProcessHIDReport>
     dda:	be cf       	rjmp	.-132    	; 0xd58 <HID_Device_ProcessControlRequest+0x156>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ddc:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <USB_ControlRequest>
     de0:	81 3a       	cpi	r24, 0xA1	; 161
     de2:	09 f0       	breq	.+2      	; 0xde6 <HID_Device_ProcessControlRequest+0x1e4>
     de4:	3e cf       	rjmp	.-388    	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
				UEINTX &= ~(1 << RXSTPI);
     de6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     dea:	87 7f       	andi	r24, 0xF7	; 247
     dec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     df0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				while (!(Endpoint_IsINReady()));
     df4:	80 ff       	sbrs	r24, 0
     df6:	fc cf       	rjmp	.-8      	; 0xdf0 <HID_Device_ProcessControlRequest+0x1ee>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     df8:	f7 01       	movw	r30, r14
     dfa:	81 85       	ldd	r24, Z+9	; 0x09
				UEDATX = Data;
     dfc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e04:	8e 77       	andi	r24, 0x7E	; 126
     e06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
     e0a:	4a dc       	rcall	.-1900   	; 0x6a0 <Endpoint_ClearStatusStage>
     e0c:	2a cf       	rjmp	.-428    	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e0e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <USB_ControlRequest>
     e12:	81 32       	cpi	r24, 0x21	; 33
     e14:	09 f0       	breq	.+2      	; 0xe18 <HID_Device_ProcessControlRequest+0x216>
				UEINTX &= ~(1 << RXSTPI);
     e16:	25 cf       	rjmp	.-438    	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
     e18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e1c:	87 7f       	andi	r24, 0xF7	; 247
     e1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearStatusStage();
     e22:	3e dc       	rcall	.-1924   	; 0x6a0 <Endpoint_ClearStatusStage>
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     e24:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <USB_ControlRequest+0x2>
     e28:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <USB_ControlRequest+0x3>
     e2c:	36 e0       	ldi	r19, 0x06	; 6
     e2e:	96 95       	lsr	r25
     e30:	87 95       	ror	r24
     e32:	3a 95       	dec	r19
     e34:	e1 f7       	brne	.-8      	; 0xe2e <HID_Device_ProcessControlRequest+0x22c>
     e36:	8c 7f       	andi	r24, 0xFC	; 252
     e38:	93 70       	andi	r25, 0x03	; 3
     e3a:	f7 01       	movw	r30, r14
     e3c:	95 87       	std	Z+13, r25	; 0x0d
     e3e:	84 87       	std	Z+12, r24	; 0x0c
     e40:	10 cf       	rjmp	.-480    	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e42:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <USB_ControlRequest>
     e46:	81 3a       	cpi	r24, 0xA1	; 161
     e48:	09 f0       	breq	.+2      	; 0xe4c <HID_Device_ProcessControlRequest+0x24a>
     e4a:	0b cf       	rjmp	.-490    	; 0xc62 <HID_Device_ProcessControlRequest+0x60>
     e4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e50:	87 7f       	andi	r24, 0xF7	; 247
     e52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				while (!(Endpoint_IsINReady()));
     e5a:	80 ff       	sbrs	r24, 0
     e5c:	fc cf       	rjmp	.-8      	; 0xe56 <HID_Device_ProcessControlRequest+0x254>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     e5e:	f7 01       	movw	r30, r14
     e60:	84 85       	ldd	r24, Z+12	; 0x0c
     e62:	95 85       	ldd	r25, Z+13	; 0x0d
     e64:	96 95       	lsr	r25
     e66:	87 95       	ror	r24
     e68:	96 95       	lsr	r25
     e6a:	87 95       	ror	r24
     e6c:	c7 cf       	rjmp	.-114    	; 0xdfc <HID_Device_ProcessControlRequest+0x1fa>

00000e6e <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     e74:	dc 01       	movw	r26, r24
     e76:	1a 96       	adiw	r26, 0x0a	; 10
     e78:	86 e0       	ldi	r24, 0x06	; 6
     e7a:	ed 01       	movw	r28, r26
     e7c:	19 92       	st	Y+, r1
     e7e:	8a 95       	dec	r24
     e80:	e9 f7       	brne	.-6      	; 0xe7c <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     e86:	84 ef       	ldi	r24, 0xF4	; 244
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	95 87       	std	Z+13, r25	; 0x0d
     e8c:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	cf 01       	movw	r24, r30
     e96:	01 96       	adiw	r24, 0x01	; 1
	  return false;

	return true;
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     e9c:	c5 cb       	rjmp	.-2166   	; 0x628 <Endpoint_ConfigureEndpointTable>

00000e9e <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e9e:	9f 92       	push	r9
     ea0:	af 92       	push	r10
     ea2:	bf 92       	push	r11
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <HID_Device_USBTask+0x18>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <HID_Device_USBTask+0x1a>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <HID_Device_USBTask+0x1c>
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     ec2:	8d b7       	in	r24, 0x3d	; 61
     ec4:	9e b7       	in	r25, 0x3e	; 62
     ec6:	9f 83       	std	Y+7, r25	; 0x07
     ec8:	8e 83       	std	Y+6, r24	; 0x06
	if (USB_DeviceState != DEVICE_STATE_Configured)
     eca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_DeviceState>
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	09 f0       	breq	.+2      	; 0xed4 <HID_Device_USBTask+0x36>
     ed2:	88 c0       	rjmp	.+272    	; 0xfe4 <HID_Device_USBTask+0x146>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     ed4:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     ed8:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     edc:	f7 01       	movw	r30, r14
     ede:	22 85       	ldd	r18, Z+10	; 0x0a
     ee0:	33 85       	ldd	r19, Z+11	; 0x0b
     ee2:	28 17       	cp	r18, r24
     ee4:	39 07       	cpc	r19, r25
     ee6:	09 f4       	brne	.+2      	; 0xeea <HID_Device_USBTask+0x4c>
     ee8:	7d c0       	rjmp	.+250    	; 0xfe4 <HID_Device_USBTask+0x146>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	8f 70       	andi	r24, 0x0F	; 15
     eee:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ef2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (Endpoint_IsReadWriteAllowed())
     ef6:	85 ff       	sbrs	r24, 5
     ef8:	75 c0       	rjmp	.+234    	; 0xfe4 <HID_Device_USBTask+0x146>
	{
     efa:	8d b7       	in	r24, 0x3d	; 61
     efc:	9e b7       	in	r25, 0x3e	; 62
     efe:	9d 83       	std	Y+5, r25	; 0x05
     f00:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f02:	40 85       	ldd	r20, Z+8	; 0x08
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	ed b7       	in	r30, 0x3d	; 61
     f08:	fe b7       	in	r31, 0x3e	; 62
     f0a:	e4 1b       	sub	r30, r20
     f0c:	f5 0b       	sbc	r31, r21
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	fe bf       	out	0x3e, r31	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	ed bf       	out	0x3d, r30	; 61
     f18:	8d b7       	in	r24, 0x3d	; 61
     f1a:	9e b7       	in	r25, 0x3e	; 62
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	6c 01       	movw	r12, r24
		uint8_t  ReportID     = 0;
     f20:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     f22:	1a 82       	std	Y+2, r1	; 0x02
     f24:	19 82       	std	Y+1, r1	; 0x01
		memset(ReportINData, 0, sizeof(ReportINData));
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	8b d0       	rcall	.+278    	; 0x1042 <memset>
		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     f2c:	8e 01       	movw	r16, r28
     f2e:	0f 5f       	subi	r16, 0xFF	; 255
     f30:	1f 4f       	sbci	r17, 0xFF	; 255
     f32:	96 01       	movw	r18, r12
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	be 01       	movw	r22, r28
     f38:	6d 5f       	subi	r22, 0xFD	; 253
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	c7 01       	movw	r24, r14
     f3e:	51 d9       	rcall	.-3422   	; 0x1e2 <CALLBACK_HID_Device_CreateHIDReport>
     f40:	98 2e       	mov	r9, r24
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     f42:	f7 01       	movw	r30, r14
     f44:	84 85       	ldd	r24, Z+12	; 0x0c
     f46:	95 85       	ldd	r25, Z+13	; 0x0d
     f48:	89 2b       	or	r24, r25
     f4a:	29 f0       	breq	.+10     	; 0xf56 <HID_Device_USBTask+0xb8>
     f4c:	11 e0       	ldi	r17, 0x01	; 1
     f4e:	86 85       	ldd	r24, Z+14	; 0x0e
     f50:	97 85       	ldd	r25, Z+15	; 0x0f
     f52:	89 2b       	or	r24, r25
     f54:	09 f0       	breq	.+2      	; 0xf58 <HID_Device_USBTask+0xba>
     f56:	10 e0       	ldi	r17, 0x00	; 0
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f58:	f7 01       	movw	r30, r14
     f5a:	a6 80       	ldd	r10, Z+6	; 0x06
     f5c:	b7 80       	ldd	r11, Z+7	; 0x07
		bool StatesChanged     = false;
     f5e:	00 e0       	ldi	r16, 0x00	; 0
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f60:	a1 14       	cp	r10, r1
     f62:	b1 04       	cpc	r11, r1
     f64:	79 f0       	breq	.+30     	; 0xf84 <HID_Device_USBTask+0xe6>
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     f66:	49 81       	ldd	r20, Y+1	; 0x01
     f68:	5a 81       	ldd	r21, Y+2	; 0x02
     f6a:	b5 01       	movw	r22, r10
     f6c:	c6 01       	movw	r24, r12
     f6e:	53 d0       	rcall	.+166    	; 0x1016 <memcmp>
     f70:	01 e0       	ldi	r16, 0x01	; 1
     f72:	89 2b       	or	r24, r25
     f74:	09 f4       	brne	.+2      	; 0xf78 <HID_Device_USBTask+0xda>
     f76:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     f78:	f7 01       	movw	r30, r14
     f7a:	40 85       	ldd	r20, Z+8	; 0x08
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	b6 01       	movw	r22, r12
     f80:	c5 01       	movw	r24, r10
     f82:	56 d0       	rcall	.+172    	; 0x1030 <memcpy>
		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	89 2b       	or	r24, r25
     f8a:	f1 f0       	breq	.+60     	; 0xfc8 <HID_Device_USBTask+0x12a>
     f8c:	91 10       	cpse	r9, r1
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <HID_Device_USBTask+0xfa>
     f90:	01 11       	cpse	r16, r1
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <HID_Device_USBTask+0xfa>
     f94:	10 ff       	sbrs	r17, 0
     f96:	18 c0       	rjmp	.+48     	; 0xfc8 <HID_Device_USBTask+0x12a>
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     f98:	f7 01       	movw	r30, r14
     f9a:	84 85       	ldd	r24, Z+12	; 0x0c
     f9c:	95 85       	ldd	r25, Z+13	; 0x0d
     f9e:	97 87       	std	Z+15, r25	; 0x0f
     fa0:	86 87       	std	Z+14, r24	; 0x0e
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fa2:	81 81       	ldd	r24, Z+1	; 0x01
     fa4:	8f 70       	andi	r24, 0x0F	; 15
     fa6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			if (ReportID)
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	81 11       	cpse	r24, r1
				UEDATX = Data;
     fae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     fb2:	69 81       	ldd	r22, Y+1	; 0x01
     fb4:	7a 81       	ldd	r23, Y+2	; 0x02
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	c6 01       	movw	r24, r12
     fbc:	cb d9       	rcall	.-3178   	; 0x354 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     fc2:	8e 77       	andi	r24, 0x7E	; 126
     fc4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     fc8:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     fcc:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     fd0:	f7 01       	movw	r30, r14
     fd2:	93 87       	std	Z+11, r25	; 0x0b
     fd4:	82 87       	std	Z+10, r24	; 0x0a
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	9d 81       	ldd	r25, Y+5	; 0x05
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	9e bf       	out	0x3e, r25	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	8d bf       	out	0x3d, r24	; 61
}
     fe4:	ee 81       	ldd	r30, Y+6	; 0x06
     fe6:	ff 81       	ldd	r31, Y+7	; 0x07
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	fe bf       	out	0x3e, r31	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	ed bf       	out	0x3d, r30	; 61
     ff2:	27 96       	adiw	r28, 0x07	; 7
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	df 90       	pop	r13
    100c:	cf 90       	pop	r12
    100e:	bf 90       	pop	r11
    1010:	af 90       	pop	r10
    1012:	9f 90       	pop	r9
    1014:	08 95       	ret

00001016 <memcmp>:
    1016:	fb 01       	movw	r30, r22
    1018:	dc 01       	movw	r26, r24
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <memcmp+0xe>
    101c:	8d 91       	ld	r24, X+
    101e:	01 90       	ld	r0, Z+
    1020:	80 19       	sub	r24, r0
    1022:	21 f4       	brne	.+8      	; 0x102c <memcmp+0x16>
    1024:	41 50       	subi	r20, 0x01	; 1
    1026:	50 40       	sbci	r21, 0x00	; 0
    1028:	c8 f7       	brcc	.-14     	; 0x101c <memcmp+0x6>
    102a:	88 1b       	sub	r24, r24
    102c:	99 0b       	sbc	r25, r25
    102e:	08 95       	ret

00001030 <memcpy>:
    1030:	fb 01       	movw	r30, r22
    1032:	dc 01       	movw	r26, r24
    1034:	02 c0       	rjmp	.+4      	; 0x103a <memcpy+0xa>
    1036:	01 90       	ld	r0, Z+
    1038:	0d 92       	st	X+, r0
    103a:	41 50       	subi	r20, 0x01	; 1
    103c:	50 40       	sbci	r21, 0x00	; 0
    103e:	d8 f7       	brcc	.-10     	; 0x1036 <memcpy+0x6>
    1040:	08 95       	ret

00001042 <memset>:
    1042:	dc 01       	movw	r26, r24
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <memset+0x6>
    1046:	6d 93       	st	X+, r22
    1048:	41 50       	subi	r20, 0x01	; 1
    104a:	50 40       	sbci	r21, 0x00	; 0
    104c:	e0 f7       	brcc	.-8      	; 0x1046 <memset+0x4>
    104e:	08 95       	ret

00001050 <_exit>:
    1050:	f8 94       	cli

00001052 <__stop_program>:
    1052:	ff cf       	rjmp	.-2      	; 0x1052 <__stop_program>
